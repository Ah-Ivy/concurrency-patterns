package com.ooooor.basic._0_basic;

/**
 * @Author ooooor
 * @Date 2019-04-08 19:11
 *
 *  * 线程安全诱因:
 *  *  1.存在共享数据(临界数据); synchronized 可代替volatile
 *  *  2.多条线程共同操作共享数据; 互斥锁 :保证同一时刻有且只有一个线程在操作共享数据，其他线程必须等到该线程处理完数据后再进行
 *
 *  * 锁的状态总共有四种，无锁状态、偏向锁、轻量级锁和重量级锁
 *  * 锁的升级是单向的，也就是说只能从低到高升级，不会出现锁的降级(在safepoint可能出现降级 Deflation)
 *
 *  * 使用monitor对象为显式同步,通过字节码指令控制;
 *  * 监视器锁（monitor）是依赖于底层的操作系统的Mutex Lock来实现的;
 *  * 操作系统实现线程之间的切换时需要从用户态转换到核心态，这个状态之间的转换需要相对比较长的时间，时间成本相对较高
 *  * 在Java 6之后，为了减少获得锁和释放锁所带来的性能消耗，引入了轻量级锁和偏向锁
 **/
public class Basic {
}
